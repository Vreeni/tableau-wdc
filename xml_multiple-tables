<html>
<head>
<title>XML Connector</title>
    <meta http-equiv="Cache-Control" content="no-store" />
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>    
    <script src="https://connectors.tableau.com/libs/tableauwdc-2.3.latest.js" type="text/javascript"></script>   
    <script type="text/javascript">
 
(function() {
    // Create the connector object
    var myConnector = tableau.makeConnector();
    // Define the schema
    myConnector.getSchema = function(schemaCallback) {
        // Schema for magnitude and place data
        var table1_cols = [{
            id: "id",
            dataType: tableau.dataTypeEnum.string
        }, {
            id: "mag",
            alias: "magnitude",
            dataType: tableau.dataTypeEnum.float
        }, {
            id: "title",
            alias: "title",
            dataType: tableau.dataTypeEnum.string
        }, {
            id: "lat",
            alias: "latitude",
            dataType: tableau.dataTypeEnum.float
        }, {
            id: "lon",
            alias: "longitude",
            dataType: tableau.dataTypeEnum.float
        }];

        var table1 = {
            id: "magPlace",
            alias: "Magnitude and Place Data",
            columns: mag_place_cols
        };

        // Schema for time and URL data
        var table2_cols = [{
            id: "id",
            dataType: tableau.dataTypeEnum.string
        }, {
            id: "time",
            alias: "time",
            dataType: tableau.dataTypeEnum.date
        }, {
            id: "url",
            alias: "url",
            dataType: tableau.dataTypeEnum.string
        }];

        var table2 = {
            id: "timeUrl",
            alias: "Time and URL Data",
            columns: time_url_cols
        };
        schemaCallback([magPlaceTable, timeUrlTable]);
    };
    
    
	
// Get the data from default link/file ==> tbd: get data from input Url
 myConnector.getData = function(table, doneCallback) {
      const proxyurl = "https://cors-anywhere.herokuapp.com/";
      //const proxyurl2 = "http://localhost:8889";
      var xhttp = new XMLHttpRequest();
    	xhttp.onreadystatechange = function() {
		if (this.readyState == 4 && this.status == 200) {
			//myFunction(this);
			var xmlDoc = this.responseXML;
 			var tableCD = xmlDoc.getElementsByTagName("CD");
  			tableData = [];
        
        //this is new
         var i = 0;
         if (table.tableInfo.id == "table1") {
                for (i = 0, len = feat.length; i < len; i++) {
                    tableData.push({
                        "id": tableCD[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue,
                        "mag": tableCD[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue,
                        "title": feat[i].properties.title,
                        "lon": feat[i].geometry.coordinates[0],
                        "lat": feat[i].geometry.coordinates[1]
                    });
                }
            } 
            //this isnew
        
  			for (i = 0; i < tableCD.length; i++) { 
        			tableData.push({
               				"col1": tableCD[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue,
               				"col2": tableCD[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue
       				});
  			}
  			table.appendRows(tableData);
		        doneCallback();
          	 }
	};
	//enter pre-defined url or take it from user input, but then have to figure out how to dynamically get the schema (right now is hardcoded)
        xhttp.open('GET', proxyurl + 'https://www.w3schools.com/xml/cd_catalog.xml', true);
	xhttp.send();
	};
      tableau.registerConnector(myConnector);
      
function myFunction(xml) {
  var xmlDoc = xml.responseXML;
  var tableCD = xmlDoc.getElementsByTagName("CD");
  tableData = [];
  for (i = 0; i < tableCD.length; i++) { 
        tableData.push({
               "id": tableCD[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue,
               "artist": tableCD[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue
        });
  }
  table.appendRows(tableData);
}


    // Create event listeners for when the user submits the input url or wants to use default test data
    $(document).ready(function() {
        $("#submitButton").click(function() {
            tableau.connectionName = "Test Data: Using default test data"; // This will be the data source name in Tableau
            tableau.submit(); // This sends the connector object to Tableau
        });
    });
    $(document).ready(function() {
        $("#submitUrl").click(function() {
	   var dataId = document.getElementById("inputURL");
	   tableau.connectionName = "URL: " + dataId;
	   tableau.connectionData = dataId;
	   tableau.submit();
        });
    });
           
   })();
  </script>

</head>


<body>

 <div class="container container-table">
        <div class="row vertical-center-row">
           <div class="text-center col-md-4 col-md-offset-4">

<p id = "inputDescription">Enter URL to JSON file</p>
<input id="inputURL" >
  <!--<input type="text" name="xmlUrl" size="50"/>-->
  <!--
      <div id="dragandrophandler">Or Drag & Drop Files Here</div>
      <br>
      Or paste XML data below
      <br>
      <textarea name="xmlText" rows="10" cols="70"/></textarea>
      <br>
  -->
  
  <!--<input type="submit" value="Get Data!">-->
  <!--//submit url button--->
  <button type = "button" id = "submitUrl" class = "btn btn-success" style = "margin: 10px;">Submit</button>
  <br>
  <!--button getting data from default dataset (earthquake or p2ops file)-->
  <button type = "button" id = "submitButton" class = "btn btn-success" style = "margin: 10px;">Get Test Data</button>
  </div>
 </div>
</div>


</body>
</html>
